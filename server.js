/******************************************************
* PLEASE DO NOT EDIT THIS FILE
* the verification process may break
* ***************************************************/

'use strict';

const fs = require('fs');
const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const port = process.env.PORT || 8080;
const router = express.Router();
const moment = require('moment');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/')
  .get(function (req, res) {
    res.sendFile(process.cwd() + '/views/index.html');
  })

router.get('/', function (req, res) {
  res.json({ message: 'hooray! welcome to our api!' });
});

router.route('/:value')
  .get(function (req, res) {
    let value = req.params.value;
    value = value.replace(',', '').split(' ');
    var date, unix;

    if (value.length > 1) {
      let month = moment().month(value[0]).format("M");
      let day = value[1];
      let year = value[2];
      date = moment(`${year}-${month}-${day}`);
      unix = date.unix();
      console.log('------------------------------------');
      console.log(date);
      console.log('------------------------------------');
    }
    else {
      value = Number(value[0])
      date = new Date(value * 1000 + 1);
      unix = date == 'Invalid Date' ? null : value;
    }

    // console.log('------------------------------------');
    // console.log(moment().month(value[0]).format("M"));
    // console.log('------------------------------------');

    const natural = moment(date).format('LL');
    res.json({
      unix: unix,
      natural: natural
    });
  });

// more routes for our API will happen here

// REGISTER OUR ROUTES -------------------------------
// all of our routes will be prefixed with /api
app.use('/', router);

// Respond not found to all the wrong routes
app.use(function (req, res, next) {
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function (err, req, res, next) {
  if (err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

app.listen(port, function () {
  console.log('Node.js listening ...');
});

